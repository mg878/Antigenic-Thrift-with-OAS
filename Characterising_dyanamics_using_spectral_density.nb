loci = 3;
alleles = 2;
L = alleles^
  loci; (*total number of antigenic types present in the population*)
\

genotypes = 
 Flatten[Table[{i, j, k}, {i, 0, alleles - 1}, {j, 0, 
    alleles - 1}, {k, 0, alleles - 1}], 
  loci - 1];(*defining genotypes as strings of 0s and 1s*)
cW = ConstantArray[{}, alleles^
  loci];(*defining the contribution to Subscript[w, i](t) from any \
strain that shares alleles with i*)
For[i = 1, i <= Length[genotypes], i++,
 For[j = 1, j <= Length[genotypes], j++,
  For[m = 1, m <= loci, m++,
   If[genotypes[[i, m]] == genotypes[[j, m]], 
    AppendTo[cW[[i]], y[j][t]]]]]]
For[i = 1, i <= Length[genotypes], i++,
 cW[[i]] = DeleteDuplicates[cW[[i]]];
 cW[[i]] = Total[cW[[i]]]]

(*setting the values for each parameter -- all defined in the report*)
\

(*the values below will result in a chaotic strain structure*)
\[Beta] = 40;
\[Mu] = 1/50;
\[Sigma] = 10;
initFreqs = {1.*10^-4, 2.*10^-4, 3.*10^-4, 4.10^-4, 5.10^-4, 6.10^-4, 
   7.*10^-4, 8.*10^-4, 9.*10^-4};
(*setting the initial frequencies of strains*)
stepSize = 
  1*10^-3;(*determines the differentiation step size,i.e.the smaller \
the more accurate*)
maxStep = 1*10^7;(*total number of steps*)
tmax = maxStep*stepSize;(*tmax is gives the total simulation time*)
cutoff = 2000; (*cutting out the first 2000 time points to remove any \
transient dynamics from the analysis*)
(*Warning: the following For loop can take several hour to run*)
For[\[CapitalOmega] = 0., \[CapitalOmega] < 0.75, \[CapitalOmega] += 0.05,
 For[\[Gamma] = 0, \[Gamma] < .85, \[Gamma] += 0.01,
  peakTemp = {};
  eqns1 = 
   Join[Table[
     z[i]'[t] == \[Beta] y[i][
         t] (1 - w[i][
           t] + (1 - \[CapitalOmega]) (w[i][t] - z[i][t])) - \[Mu] z[
          i][t], {i, 1, L}]];
  eqns2 = 
   Join[Table[
     y[i]'[t] == \[Beta] y[i][
         t] ((1 - 
            w[i][t]) + (1 - \[Gamma]) (w[i][t] - 
             z[i][t])) - \[Sigma] y[i][t], {i, 1, L}]];
  eqns3 = 
   Join[Table[
     w[i]'[t] == \[Beta] (cW[[i]]) (1 - w[i][t]) - \[Mu] w[i][t], {i, 
      1, L}], Join[Table[z[i][0] == 0, {i, 1, L}], 
     Table[y[i][0] == initFreqs[[i]], {i, 1, L}], 
     Table[w[i][0] == 0, {i, 1, L}]]];
  eqns = Join[eqns1, eqns2, eqns3];
  sol = NDSolve[eqns, Join[Table[y[i], {i, L}]], {t, maxStep}, 
    MaxSteps -> maxStep, MaxStepSize -> stepSize];
   Ytraj = 
   Table[Table[{m, (y[o][t] /. sol /. t -> m)[[1]]}, {m, 0, tmax - 1, 
      1}], {o, 1, L}];
  (*after generating the thrift dynamics, 
  we save the full time trajectory of proportion infectious for *)
  For[i = 1, i <= Length[Ytraj], i++, 
   Export["Path\\to\\directory\\" <> "Ytraj_" <> "_" <> 
     ToString[\[Gamma]] <> "_" <> ToString[\[CapitalOmega]] <> "_" <> 
     ToString[i] <> ".txt", Ytraj[[i]]]];
  For[i = 1, i <= Length[Ytraj], i++,
   AppendTo[peakTemp, 
    Length[FindPeaks[
      Log[Abs[Fourier[
         Transpose[Ytraj[[i]]][[-1]][[cutoff ;; tmax]]]]^2], 
      1]]]];(*log of spectral density*)
  AppendTo[
   peakNumebrstot, {\[Gamma], \[CapitalOmega], N[Mean[peakTemp]]}];
  Print[{\[Gamma], \[CapitalOmega], N[Mean[peakTemp]]}];
  ]]
